-----------------------------------------------------
Container declaration syntax. container_class<type_parameter> container_name;
-----------------------------------------------------
std::vector<int> intVector;
std::deque<int> intDeque;
std::list<double> doubleList = {1.3, 4.3, 5.2, 1.3}
std::forward_list<std::string> stringForwardList = {st, ri, ng, !};
std::array<std::string, 4> stringArray
-----------------------------------------------------
Common Container Functions
-----------------------------------------------------
-----------------------------------------------------
c.empty() const; // True if there are no elements in c
-----------------------------------------------------
Yep, intVector is empty
-----------------------------------------------------
c.size() const; // Number of elements in container c
-----------------------------------------------------
intDeque has 0 element(s) 
-----------------------------------------------------
c.erase(); // removes one or more specific elements of the container
-----------------------------------------------------
doubleList: 1.3 4.3 5.2 1.3 
doubleList: 4.3 5.2 1.3 
-----------------------------------------------------
c.clear(); // removes all elements from the container // no good for std::array
-----------------------------------------------------
stringForwardList: st ri ng ! 
stringForwardList: 
-----------------------------------------------------
c = cc; // replaces contents of c with contents of cc
-----------------------------------------------------
stringArray:     
stringArrayTwo: st ri ng ! 
stringArray = stringArrayTwo;
stringArray: st ri ng ! 
stringArrayTwo: st ri ng ! 
-----------------------------------------------------
c.swap(cc); // swaps contents of c with contents of cc
-----------------------------------------------------
stringArray: st ri ng ! 
stringArrayThree: ! gn ir ts 
stringArray.swap(stringArrayThree);
stringArray: ! gn ir ts 
stringArrayThree: st ri ng ! 
-----------------------------------------------------
For Sequential Containers
-----------------------------------------------------
-----------------------------------------------------
c.push_front() & c.push_back()
-----------------------------------------------------
intVector.push_back(3); // no push_front
intDeque.push_back(3); intDeque.push_front(3);
doubleList.push_back(3.14); doubleList.push_front(3.14);
stringForwardList.push_front(Howdy); // no push_back
// stringArray has no push. back or front. Its just a templated array.
intVector: 3 
intDeque: 3 3 
doubleList: 3.14 4.3 5.2 1.3 3.14 
stringForwardList: Howdy 
stringArray: ! gn ir ts 
-----------------------------------------------------
c.pop_front() & c.pop_back()
-----------------------------------------------------
intVector.pop_back(); // no pop_front
intDeque.pop_back(); intDeque.pop_front();
doubleList.pop_back(); doubleList.pop_front();
stringForwardList.pop_front(); // no push_back
// stringArray has no pop. back or front. Its just a templated array.
intVector: 
intDeque: 
doubleList: 4.3 5.2 1.3 
stringForwardList: 
stringArray: ! gn ir ts 
-----------------------------------------------------
c.front() & c.back()
-----------------------------------------------------
intVector.front(): 3 intVector.back(): 0
intDeque.front(): 3 intDeque.back(): 3
doubleList.front(): 4.3 doubleList.back(): 1.3
stringForwardList.front(): Hey // no stringForwardList.back(): 
stringArray.front(): ! stringArray.back(): ts
