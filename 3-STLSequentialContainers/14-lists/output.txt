l: 9 8 7 6 5 4 3 2 1 0 0 2 4 6 8 10 12 14 16 18 
front(): 9
back(): 18
pop_front() & pop_back()
l: 9 8 7 6 5 4 3 2 1 0 0 2 4 6 8 10 12 14 16 18 
inserting 67 before 6th element
l: 9 8 7 6 5 67 4 3 2 1 0 0 2 4 6 8 10 12 14 16 18 
erasing 67 we just inserted
l: 9 8 7 6 5 4 3 2 1 0 0 2 4 6 8 10 12 14 16 18 
size(): 20
empty(): 0
resize to 40. Uses T() default constructor for new elements
l: 9 8 7 6 5 4 3 2 1 0 0 2 4 6 8 10 12 14 16 18 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
resize to 10
l: 9 8 7 6 5 4 3 2 1 0 
clear() is linear
l: 
repopulated l
l: 9 8 7 6 5 4 3 2 1 0 0 2 4 6 8 10 12 14 16 18 
new list std::list<int> d = {1, 3}
Range splice
d.splice(dit, l, lit1, lit2);
d: 1 8 7 6 5 4 3 2 1 0 0 2 4 6 8 10 12 14 16 3 
l: 9 18 
Or can splice all of l into d
d.splice(d.begin(), l);
d: 9 18 1 8 7 6 5 4 3 2 1 0 0 2 4 6 8 10 12 14 16 3 
l: 
d.remove(6)
d: 9 18 1 8 7 5 4 3 2 1 0 0 2 4 8 10 12 14 16 3 
d.unique() : Only does consecutive copies : Call on sorted list
d: 9 18 1 8 7 5 4 3 2 1 0 2 4 8 10 12 14 16 3 
d.sort()
d: 0 1 1 2 2 3 3 4 4 5 7 8 8 9 10 12 14 16 18 
d.reverse()
d: 18 16 14 12 10 9 8 8 7 5 4 4 3 3 2 2 1 1 0 
d.unique() : Only does consecutive copies : Call on sorted list
d: 18 16 14 12 10 9 8 7 5 4 3 2 1 0 
std::list<int> dd = {18, 16, 20, 25, 20};
dd: 18 18 16 20 25 20 
Sorting dd
dd: 16 18 18 20 20 25 
Sorting d
d: 0 1 2 3 4 5 7 8 9 10 12 14 16 18 
Merging dd into d
d: 0 1 2 3 4 5 7 8 9 10 12 14 16 16 18 18 18 20 20 25 
dd: 
